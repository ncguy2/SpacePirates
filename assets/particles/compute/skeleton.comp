#version 450
#define M_PI 3.1415926535897932384626433832795
#define M_TAU (M_PI * 2)
#define MAX_PARTICLES 5000

layout (local_size_x = 16) in;

#pragma include("includes/particle.glsl")
#pragma include("includes/colourCurve.glsl")

highp float rand(vec2 co) {
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

uniform int u_rngBaseSeed = 1;
int rngSeed;
int fastrand() {
    rngSeed = (214013 * rngSeed + 2531011);
    return (rngSeed >> 16) & 0x7FFF;
}

const float scalar = 768.0;
const float factor = 1.0 / scalar;
float f_fastrand() {
    int r = fastrand();
    return mod(r, scalar) * factor;
}

uniform float gTime;
uniform float iTime;
uniform float u_delta;
uniform int u_startId = 0;
uniform int imaxParticleCount = 0;
uniform vec2 u_spawnPoint;
uniform mat3 u_spawnMatrix;
uniform float u_simSpeed = 1;

int particleId;
float delta;

highp float SeededRandom(float seed) {
    vec2 co;
    co.x = float(particleId) / float(imaxParticleCount);
    co.y = seed;
    return rand(co);
}

highp float Random() {
    return SeededRandom(f_fastrand());
}

#pragma include("includes/noise.glsl")

#pragma inject("uniforms")
#pragma inject("declarations")

void main() {
    uint invocationIdx = gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                        gl_GlobalInvocationID.y * gl_WorkGroupSize.x +
                        gl_GlobalInvocationID.x;


    particleId = abs(int(invocationIdx));
    particleId += u_startId;

    if(particleId > imaxParticleCount)
        return;

    delta = u_delta * u_simSpeed;
    rngSeed += particleId;
    ParticleData datum = Data[particleId];


    #pragma inject("invocations")

    Data[particleId] = datum;
}


#pragma inject("definitions")