#version 450
#define M_PI 3.1415926535897932384626433832795
#define M_TAU (M_PI * 2)
#define MAX_PARTICLES 5000
#define p_type

layout (local_size_x = 1) in;

const float scalar = 768.0;
const float factor = 1.0 / scalar;

uniform int u_particleCount;
uniform int u_rngBaseSeed = 1;

uniform float u_delta;
uniform float u_simSpeed = 1;
uniform float u_globalTime;

uniform mat3 u_transform;

int rngSeed;
uint particleId;

float delta;

#pragma include("/particles/includes/particle.glsl")
#pragma include("/particles/includes/colourCurve.glsl")

#pragma inject("imports")

vec2 rotate(vec2 v, float a) {
    float s = sin(a);
    float c = cos(a);
    mat2 m = mat2(c, -s, s, c);
    return m * v;
}

#pragma inject("uniforms")
#pragma inject("declarations")

void main() {
    uint invocationIdx = gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
    gl_GlobalInvocationID.y * gl_WorkGroupSize.x +
    gl_GlobalInvocationID.x;

    particleId = Idx_Indices[abs(int(invocationIdx))];

    delta = u_delta * u_simSpeed;
    rngSeed += int(particleId);
    ParticleData datum = Data[particleId];

    #pragma inject("invocations")

    if(datum.Alive && datum.Life < 0) {
        datum.Alive = false;
        uint idx = atomicCounterIncrement(deadBufferCounter);
        Dead_Indices[idx] = particleId;
    }

    Data[particleId] = datum;
}


#pragma inject("definitions")